// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type serviceRowTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *serviceRowTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("services").
func (v *serviceRowTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *serviceRowTableType) Columns() []string {
	return []string{"service_id", "service_type", "service_name", "node_id", "created_at", "address", "port", "unix_socket"}
}

// NewStruct makes a new struct for that view or table.
func (v *serviceRowTableType) NewStruct() reform.Struct {
	return new(ServiceRow)
}

// NewRecord makes a new record for that table.
func (v *serviceRowTableType) NewRecord() reform.Record {
	return new(ServiceRow)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *serviceRowTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ServiceRowTable represents services view or table in SQL database.
var ServiceRowTable = &serviceRowTableType{
	s: parse.StructInfo{Type: "ServiceRow", SQLSchema: "", SQLName: "services", Fields: []parse.FieldInfo{{Name: "ServiceID", Type: "string", Column: "service_id"}, {Name: "ServiceType", Type: "ServiceType", Column: "service_type"}, {Name: "ServiceName", Type: "string", Column: "service_name"}, {Name: "NodeID", Type: "string", Column: "node_id"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}, {Name: "Address", Type: "*string", Column: "address"}, {Name: "Port", Type: "*uint16", Column: "port"}, {Name: "UnixSocket", Type: "*string", Column: "unix_socket"}}, PKFieldIndex: 0},
	z: new(ServiceRow).Values(),
}

// String returns a string representation of this struct or record.
func (s ServiceRow) String() string {
	res := make([]string, 8)
	res[0] = "ServiceID: " + reform.Inspect(s.ServiceID, true)
	res[1] = "ServiceType: " + reform.Inspect(s.ServiceType, true)
	res[2] = "ServiceName: " + reform.Inspect(s.ServiceName, true)
	res[3] = "NodeID: " + reform.Inspect(s.NodeID, true)
	res[4] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[5] = "Address: " + reform.Inspect(s.Address, true)
	res[6] = "Port: " + reform.Inspect(s.Port, true)
	res[7] = "UnixSocket: " + reform.Inspect(s.UnixSocket, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ServiceRow) Values() []interface{} {
	return []interface{}{
		s.ServiceID,
		s.ServiceType,
		s.ServiceName,
		s.NodeID,
		s.CreatedAt,
		s.Address,
		s.Port,
		s.UnixSocket,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ServiceRow) Pointers() []interface{} {
	return []interface{}{
		&s.ServiceID,
		&s.ServiceType,
		&s.ServiceName,
		&s.NodeID,
		&s.CreatedAt,
		&s.Address,
		&s.Port,
		&s.UnixSocket,
	}
}

// View returns View object for that struct.
func (s *ServiceRow) View() reform.View {
	return ServiceRowTable
}

// Table returns Table object for that record.
func (s *ServiceRow) Table() reform.Table {
	return ServiceRowTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *ServiceRow) PKValue() interface{} {
	return s.ServiceID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *ServiceRow) PKPointer() interface{} {
	return &s.ServiceID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *ServiceRow) HasPK() bool {
	return s.ServiceID != ServiceRowTable.z[ServiceRowTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *ServiceRow) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ServiceID = string(i64)
	} else {
		s.ServiceID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = ServiceRowTable
	_ reform.Struct = (*ServiceRow)(nil)
	_ reform.Table  = ServiceRowTable
	_ reform.Record = (*ServiceRow)(nil)
	_ fmt.Stringer  = (*ServiceRow)(nil)
)

func init() {
	parse.AssertUpToDate(&ServiceRowTable.s, new(ServiceRow))
}
