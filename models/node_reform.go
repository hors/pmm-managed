// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type nodeRowTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *nodeRowTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("nodes").
func (v *nodeRowTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *nodeRowTableType) Columns() []string {
	return []string{"node_id", "node_type", "node_name", "machine_id", "created_at", "distro", "distro_version", "docker_container_id", "docker_container_name", "instance", "region"}
}

// NewStruct makes a new struct for that view or table.
func (v *nodeRowTableType) NewStruct() reform.Struct {
	return new(NodeRow)
}

// NewRecord makes a new record for that table.
func (v *nodeRowTableType) NewRecord() reform.Record {
	return new(NodeRow)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *nodeRowTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// NodeRowTable represents nodes view or table in SQL database.
var NodeRowTable = &nodeRowTableType{
	s: parse.StructInfo{Type: "NodeRow", SQLSchema: "", SQLName: "nodes", Fields: []parse.FieldInfo{{Name: "NodeID", Type: "string", Column: "node_id"}, {Name: "NodeType", Type: "NodeType", Column: "node_type"}, {Name: "NodeName", Type: "string", Column: "node_name"}, {Name: "MachineID", Type: "*string", Column: "machine_id"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}, {Name: "Distro", Type: "*string", Column: "distro"}, {Name: "DistroVersion", Type: "*string", Column: "distro_version"}, {Name: "DockerContainerID", Type: "*string", Column: "docker_container_id"}, {Name: "DockerContainerName", Type: "*string", Column: "docker_container_name"}, {Name: "Instance", Type: "*string", Column: "instance"}, {Name: "Region", Type: "*string", Column: "region"}}, PKFieldIndex: 0},
	z: new(NodeRow).Values(),
}

// String returns a string representation of this struct or record.
func (s NodeRow) String() string {
	res := make([]string, 11)
	res[0] = "NodeID: " + reform.Inspect(s.NodeID, true)
	res[1] = "NodeType: " + reform.Inspect(s.NodeType, true)
	res[2] = "NodeName: " + reform.Inspect(s.NodeName, true)
	res[3] = "MachineID: " + reform.Inspect(s.MachineID, true)
	res[4] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[5] = "Distro: " + reform.Inspect(s.Distro, true)
	res[6] = "DistroVersion: " + reform.Inspect(s.DistroVersion, true)
	res[7] = "DockerContainerID: " + reform.Inspect(s.DockerContainerID, true)
	res[8] = "DockerContainerName: " + reform.Inspect(s.DockerContainerName, true)
	res[9] = "Instance: " + reform.Inspect(s.Instance, true)
	res[10] = "Region: " + reform.Inspect(s.Region, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *NodeRow) Values() []interface{} {
	return []interface{}{
		s.NodeID,
		s.NodeType,
		s.NodeName,
		s.MachineID,
		s.CreatedAt,
		s.Distro,
		s.DistroVersion,
		s.DockerContainerID,
		s.DockerContainerName,
		s.Instance,
		s.Region,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *NodeRow) Pointers() []interface{} {
	return []interface{}{
		&s.NodeID,
		&s.NodeType,
		&s.NodeName,
		&s.MachineID,
		&s.CreatedAt,
		&s.Distro,
		&s.DistroVersion,
		&s.DockerContainerID,
		&s.DockerContainerName,
		&s.Instance,
		&s.Region,
	}
}

// View returns View object for that struct.
func (s *NodeRow) View() reform.View {
	return NodeRowTable
}

// Table returns Table object for that record.
func (s *NodeRow) Table() reform.Table {
	return NodeRowTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *NodeRow) PKValue() interface{} {
	return s.NodeID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *NodeRow) PKPointer() interface{} {
	return &s.NodeID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *NodeRow) HasPK() bool {
	return s.NodeID != NodeRowTable.z[NodeRowTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *NodeRow) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.NodeID = string(i64)
	} else {
		s.NodeID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = NodeRowTable
	_ reform.Struct = (*NodeRow)(nil)
	_ reform.Table  = NodeRowTable
	_ reform.Record = (*NodeRow)(nil)
	_ fmt.Stringer  = (*NodeRow)(nil)
)

func init() {
	parse.AssertUpToDate(&NodeRowTable.s, new(NodeRow))
}
